# tabs/export.py

import streamlit as st
import io
import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import plotly.graph_objects as go
from utils.portfolio_helper import get_mock_financial_metrics, get_financial_metrics_yfinance, get_historical_data
from utils.pdf_helper import extract_text_from_pdfs
from openai import OpenAI
from dotenv import load_dotenv
import plotly.io as pio



load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def add_page_number(c, page_num, width, height):
    c.setFont("Helvetica-Oblique", 8)
    c.drawRightString(width - 40, 20, f"Page {page_num}")
    return page_num

def write_section(c, y, title, text, page_num, width, height):
    from textwrap import wrap

    c.setFont("Helvetica-Bold", 13)
    c.drawString(50, y, title)
    y -= 20
    c.setFont("Helvetica", 10)
    wrapped = wrap(text, width=100)
    for line in wrapped:
        if y < 80:
            page_num = add_page_number(c, page_num, width, height)
            c.showPage()
            page_num += 1
            y = height - 60
            c.setFont("Helvetica", 10)
        c.drawString(50, y, line)
        y -= 14
    y -= 15
    return y, page_num

def export_tab():
    st.header("📄 FinGPT Pro – Export Full Financial Report")

    tickers = st.session_state.get("tickers", [])
    pdf_mapping = st.session_state.get("pdf_ticker_mapping", {})
    market = st.session_state.get("market", "🇮🇳 Indian")

    if not tickers:
        st.info("Upload PDFs to export reports.")
        return

    for ticker in tickers:
        try:
            summary = st.session_state.get(f"summary_{ticker}", "GPT Q&A summary not available")
            swot = st.session_state.get(f"swot_{ticker}", "SWOT analysis not available")
            keyword_result = st.session_state.get(f"keyword_result_{ticker}", "No keyword matches found")

            headlines = []
            from tabs.news_sentiment import fetch_news_headlines, analyze_sentiment_with_gpt
            headlines = fetch_news_headlines(ticker)
            news_analysis = "\n".join([f"{title} — {analyze_sentiment_with_gpt(title)}" for title in headlines])

            web_metrics = (
                get_mock_financial_metrics(ticker)
                if market == "🇮🇳 Indian"
                else get_financial_metrics_yfinance(ticker)
            )
            hist_data = get_historical_data(ticker)

            # Create trend chart image
            trend_fig = go.Figure()
            trend_fig.add_trace(go.Scatter(x=hist_data["Year"], y=hist_data["Revenue"], mode='lines+markers', name='Revenue'))
            trend_fig.add_trace(go.Scatter(x=hist_data["Year"], y=hist_data["Net Profit"], mode='lines+markers', name='Net Profit'))
            trend_fig.add_trace(go.Scatter(x=hist_data["Year"], y=hist_data["EPS"], mode='lines+markers', name='EPS'))
            trend_fig.update_layout(title=f"{ticker} – Historical Financial Trends")

            chart_path = f"{ticker}_trend_temp.png"
            pio.defaults.format = "png"
            pio.defaults.width = 700
            pio.defaults.height = 500
            pio.defaults.scale = 1

            with open(chart_path, "wb") as f:
                f.write(pio.to_image(trend_fig, format="png"))

            # Setup PDF canvas
            buffer = io.BytesIO()
            c = canvas.Canvas(buffer, pagesize=A4)
            width, height = A4
            y = height - 60
            page_num = 1

            # Cover page
            c.setFont("Helvetica-Bold", 18)
            c.drawString(50, y, f"{ticker} – Financial Analysis Report")
            y -= 30
            c.setFont("Helvetica", 12)
            c.drawString(50, y, "Generated by FinGPT Pro: AI-Powered Portfolio Intelligence Platform")
            y -= 20
            c.setFont("Helvetica", 10)
            c.drawString(50, y, f"Date: {datetime.today().strftime('%B %d, %Y')}")
            y -= 30

            # Write sections
            y, page_num = write_section(c, y, "📌 GPT Q&A Summary", summary, page_num, width, height)
            y, page_num = write_section(c, y, "📊 SWOT Analysis", swot, page_num, width, height)
            y, page_num = write_section(c, y, "🔍 Keyword Matches", keyword_result, page_num, width, height)
            y, page_num = write_section(c, y, "📰 News Sentiment", news_analysis, page_num, width, height)
            y, page_num = write_section(c, y, "📈 Web Financial Metrics", "\n".join([f"{k}: ₹{v}" for k, v in web_metrics.items()]), page_num, width, height)

            # Add chart image
            if y < 300:
                page_num = add_page_number(c, page_num, width, height)
                c.showPage()
                page_num += 1
                y = height - 60

            c.drawImage(chart_path, 50, y - 240, width=500, height=240)
            os.remove(chart_path)

            # Final page number and save
            page_num = add_page_number(c, page_num, width, height)
            c.save()
            buffer.seek(0)

            st.download_button(
                label=f"📁 Download Full Report for {ticker}",
                data=buffer,
                file_name=f"{ticker}_Full_Analysis_Report.pdf",
                mime="application/pdf"
            )

        except Exception as e:
            st.error(f"❌ Error generating PDF for {ticker}: {e}")
